@echo off
setlocal enabledelayedexpansion

:: === C·∫§U H√åNH ===
set allowed_user=as
set repo_path=C:\xampp\htdocs\SystemDoctor\nhom5
set log_file=%repo_path%\sync-log_%date:~-4%%date:~3,2%%date:~0,2%.txt
set interval=10
set lock_file=%repo_path%\auto-sync.lock

:: Ki·ªÉm tra instance ƒëang ch·∫°y
if exist "%lock_file%" (
    echo [%date% %time%] ‚ùå Script ƒëang ch·∫°y ·ªü instance kh√°c >> "%log_file%"
    exit /b
)
echo Running > "%lock_file%"

:: Ki·ªÉm tra ng∆∞·ªùi d√πng
if /I not "%USERNAME%"=="%allowed_user%" (
    echo [%date% %time%] ‚ùå User %USERNAME% kh√¥ng ƒë∆∞·ª£c ph√©p >> "%log_file%"
    del "%lock_file%"
    exit /b
)

:: Ki·ªÉm tra th∆∞ m·ª•c t·ªìn t·∫°i
if not exist "%repo_path%" (
    echo [%date% %time%] ‚ùå Th∆∞ m·ª•c %repo_path% kh√¥ng t·ªìn t·∫°i >> "%log_file%"
    del "%lock_file%"
    exit /b
)

cd /d "%repo_path%"

:: Ki·ªÉm tra Git repository
git status >nul 2>&1
if errorlevel 1 (
    echo [%date% %time%] ‚ùå Kh√¥ng ph·∫£i th∆∞ m·ª•c Git h·ª£p l·ªá >> "%log_file%"
    del "%lock_file%"
    exit /b
)

:: Ki·ªÉm tra Git config
git config user.name >nul 2>&1
if errorlevel 1 (
    echo [%date% %time%] ‚ùå Git user.name ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Ch·∫°y: git config --global user.name "Your Name" >> "%log_file%"
    del "%lock_file%"
    exit /b
)
git config user.email >nul 2>&1
if errorlevel 1 (
    echo [%date% %time%] ‚ùå Git user.email ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Ch·∫°y: git config --global user.email "your.email@example.com" >> "%log_file%"
    del "%lock_file%"
    exit /b
)

echo [%date% %time%] üöÄ Auto Git Sync started by %USERNAME% >> "%log_file%"

:loop
(
    echo ------------------------------------------------------
    echo [%date% %time%] üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô...
    echo.

    echo üîΩ PULL t·ª´ GitHub...
    :: L∆∞u stash n·∫øu c√≥ thay ƒë·ªïi
    git diff --quiet && git diff --cached --quiet
    if errorlevel 1 (
        echo üì¶ Stashing thay ƒë·ªïi c·ª•c b·ªô...
        git stash
    )
    git pull --rebase
    if errorlevel 1 (
        echo ‚ö†Ô∏è L·ªói khi PULL, th·ª≠ reset v√† pull l·∫°i...
        git rebase --abort >nul 2>&1
        git reset --hard
        git pull
        if errorlevel 1 (
            echo [%date% %time%] ‚ùå L·ªói PULL kh√¥ng th·ªÉ kh·∫Øc ph·ª•c >> "%log_file%"
            del "%lock_file%"
            exit /b
        )
    )
    :: √Åp d·ª•ng l·∫°i stash n·∫øu c√≥
    git stash pop >nul 2>&1

    echo üîº ADD thay ƒë·ªïi...
    git add -A

    echo üíæ Ki·ªÉm tra thay ƒë·ªïi ƒë·ªÉ commit...
    git diff --cached --quiet
    if errorlevel 1 (
        echo ‚úÖ C√≥ thay ƒë·ªïi, th·ª±c hi·ªán COMMIT v√† PUSH...
        git commit -m "Auto sync at %date% %time%"
        git push
        if errorlevel 1 (
            echo [%date% %time%] ‚ö†Ô∏è L·ªói khi PUSH, th·ª≠ pull v√† push l·∫°i... >> "%log_file%"
            git pull --rebase
            if errorlevel 1 (
                echo [%date% %time%] ‚ùå L·ªói PULL khi x·ª≠ l√Ω PUSH >> "%log_file%"
                del "%lock_file%"
                exit /b
            )
            git push
            if errorlevel 1 (
                echo [%date% %time%] ‚ùå L·ªói PUSH kh√¥ng th·ªÉ kh·∫Øc ph·ª•c >> "%log_file%"
                del "%lock_file%"
                exit /b
            )
        )
    ) else (
        echo ‚è∏ Kh√¥ng c√≥ g√¨ thay ƒë·ªïi.
    )

    echo.
    echo [%date% %time%] ‚úÖ Xong 1 chu k·ª≥, ch·ªù %interval%s...
    echo ------------------------------------------------------
    echo.
) >> "%log_file%" 2>&1

timeout /t %interval% >nul
goto loop

:: X√≥a lock file khi tho√°t
del "%lock_file%"